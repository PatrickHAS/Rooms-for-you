openapi: 3.0.3
info:
  title: Rooms for you
  version: 1.0.0
  description: Hotel vacancy management
paths:
  /api/hotels/:
    get:
      operationId: api_hotels_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hotel'
          description: ''
    post:
      operationId: api_hotels_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hotel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Hotel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Hotel'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
          description: ''
  /api/hotels/{id}/:
    get:
      operationId: api_hotels_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
          description: ''
    put:
      operationId: api_hotels_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hotel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Hotel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Hotel'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
          description: ''
    patch:
      operationId: api_hotels_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedHotel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedHotel'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedHotel'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hotel'
          description: ''
    delete:
      operationId: api_hotels_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/hotels/{id}/feedbacks/:
    get:
      operationId: api_hotels_feedbacks_list
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feedback'
          description: ''
    post:
      operationId: api_hotels_feedbacks_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feedback'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Feedback'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Feedback'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feedback'
          description: ''
  /api/hotels/{id}/rooms/:
    get:
      operationId: api_hotels_rooms_list
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
          description: ''
    post:
      operationId: api_hotels_rooms_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Room'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Room'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: ''
  /api/login/:
    post:
      operationId: api_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/reservations/:
    get:
      operationId: api_reservations_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservations_users_rooms_'
          description: ''
    post:
      operationId: api_reservations_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservations_users_rooms_'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reservations_users_rooms_'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Reservations_users_rooms_'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservations_users_rooms_'
          description: ''
  /api/reservations/{id}/:
    get:
      operationId: api_reservations_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservations_users_rooms_'
          description: ''
    put:
      operationId: api_reservations_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservations_users_rooms_'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Reservations_users_rooms_'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Reservations_users_rooms_'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservations_users_rooms_'
          description: ''
    patch:
      operationId: api_reservations_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReservations_users_rooms_'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReservations_users_rooms_'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReservations_users_rooms_'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservations_users_rooms_'
          description: ''
    delete:
      operationId: api_reservations_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/rooms/:
    get:
      operationId: api_rooms_list
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
          description: ''
    post:
      operationId: api_rooms_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Room'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Room'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: ''
  /api/rooms/{id}/:
    get:
      operationId: api_rooms_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: ''
    put:
      operationId: api_rooms_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Room'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Room'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: ''
    patch:
      operationId: api_rooms_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRoom'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRoom'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRoom'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
          description: ''
    delete:
      operationId: api_rooms_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/:
    get:
      operationId: api_users_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: api_users_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{id}/:
    get:
      operationId: api_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        street:
          type: string
          maxLength: 255
        number:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        city:
          type: string
          maxLength: 255
        cep:
          type: string
          maxLength: 9
      required:
      - cep
      - city
      - id
      - number
      - street
    Feedback:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        rating:
          $ref: '#/components/schemas/RatingEnum'
        description:
          type: string
          nullable: true
          maxLength: 256
        owner:
          type: string
          format: uuid
          readOnly: true
      required:
      - id
      - owner
      - rating
    Hotel:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        owner:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        address:
          $ref: '#/components/schemas/Address'
        feedbacks:
          type: array
          items:
            $ref: '#/components/schemas/Feedback'
          readOnly: true
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - address
      - feedbacks
      - id
      - name
      - owner
      - rooms
    Nested:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        last_login:
          type: string
          format: date-time
          nullable: true
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        date_joined:
          type: string
          format: date-time
        password:
          type: string
          maxLength: 100
        email:
          type: string
          format: email
          maxLength: 100
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        is_legal:
          type: boolean
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
        user_permissions:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
        reservations:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - created_at
      - email
      - first_name
      - groups
      - id
      - last_name
      - password
      - reservations
      - updated_at
      - user_permissions
      - username
    PatchedHotel:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        owner:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        address:
          $ref: '#/components/schemas/Address'
        feedbacks:
          type: array
          items:
            $ref: '#/components/schemas/Feedback'
          readOnly: true
        rooms:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
    PatchedReservations_users_rooms_:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        room:
          allOf:
          - $ref: '#/components/schemas/Room'
          readOnly: true
        checkin_date:
          type: string
          format: date
        checkout_date:
          type: string
          format: date
    PatchedRoom:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        number:
          type: integer
        beds:
          type: integer
        ranking:
          type: string
          maxLength: 255
        hotel:
          allOf:
          - $ref: '#/components/schemas/Hotel'
          readOnly: true
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        unavailable_days:
          type: string
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 100
        email:
          type: string
          format: email
          maxLength: 100
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        is_active:
          type: boolean
          readOnly: true
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        is_legal:
          type: boolean
          nullable: true
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    RatingEnum:
      enum:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      type: integer
    Reservations_users_rooms_:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        room:
          allOf:
          - $ref: '#/components/schemas/Room'
          readOnly: true
        checkin_date:
          type: string
          format: date
        checkout_date:
          type: string
          format: date
      required:
      - checkin_date
      - checkout_date
      - id
      - room
      - user
    Room:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        number:
          type: integer
        beds:
          type: integer
        ranking:
          type: string
          maxLength: 255
        hotel:
          allOf:
          - $ref: '#/components/schemas/Hotel'
          readOnly: true
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        unavailable_days:
          type: string
          readOnly: true
      required:
      - beds
      - hotel
      - id
      - number
      - ranking
      - services
      - unavailable_days
    Service:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
      required:
      - id
      - name
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 100
        email:
          type: string
          format: email
          maxLength: 100
        first_name:
          type: string
          maxLength: 50
        last_name:
          type: string
          maxLength: 50
        is_active:
          type: boolean
          readOnly: true
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        is_legal:
          type: boolean
          nullable: true
        is_superuser:
          type: boolean
          readOnly: true
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - email
      - first_name
      - id
      - is_active
      - is_superuser
      - last_name
      - password
      - updated_at
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
